<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Myabtis-plus</title>
      <link href="/buffifly/2021/07/23/Myabtis-plus/"/>
      <url>/buffifly/2021/07/23/Myabtis-plus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\buffifly\css\APlayer.min.css"><script src="\buffifly\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\buffifly\js\Meting.min.js"></script><h1 id="Myabtis-plus"><a href="#Myabtis-plus" class="headerlink" title="Myabtis-plus"></a>Myabtis-plus</h1><pre><code> public static String scanner(String tip) {        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);        System.out.println(help.toString());        if (scanner.hasNext()) {            String ipt = scanner.next();            if (StringUtils.isNotBlank(ipt)) {                return ipt;            }        }        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);    }public static void main(String[] args) {    // 代码生成器    AutoGenerator mpg = new AutoGenerator();    // 全局配置    GlobalConfig gc = new GlobalConfig();    String projectPath = System.getProperty(&quot;user.dir&quot;);    gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);    gc.setAuthor(&quot;xiaoou&quot;);    gc.setOpen(false);    // gc.setSwagger2(true); 实体属性 Swagger2 注解    mpg.setGlobalConfig(gc);    // 数据源配置    DataSourceConfig dsc = new DataSourceConfig();    dsc.setUrl(&quot;jdbc:mysql://localhost:3306/jsp?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);    // dsc.setSchemaName(&quot;public&quot;);    dsc.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);    dsc.setUsername(&quot;root&quot;);    dsc.setPassword(&quot;633633&quot;);    mpg.setDataSource(dsc);    // 包配置    PackageConfig pc = new PackageConfig();    pc.setModuleName(scanner(&quot;模块名&quot;));    pc.setParent(&quot;com.baomidou.ant&quot;);    mpg.setPackageInfo(pc);    // 自定义配置    InjectionConfig cfg = new InjectionConfig() {        @Override        public void initMap() {            // to do nothing        }    };    // 如果模板引擎是 freemarker    String templatePath = &quot;/templates/mapper.xml.ftl&quot;;    // 如果模板引擎是 velocity    // String templatePath = &quot;/templates/mapper.xml.vm&quot;;    // 自定义输出配置    List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();    // 自定义配置会被优先输出    focList.add(new FileOutConfig(templatePath) {        @Override        public String outputFile(TableInfo tableInfo) {            // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！            return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()                    + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;        }    });    /*    cfg.setFileCreate(new IFileCreate() {        @Override        public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {            // 判断自定义文件夹是否需要创建            checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);            if (fileType == FileType.MAPPER) {                // 已经生成 mapper 文件判断存在，不想重新生成返回 false                return !new File(filePath).exists();            }            // 允许生成模板文件            return true;        }    });    */    cfg.setFileOutConfigList(focList);    mpg.setCfg(cfg);    // 配置模板    TemplateConfig templateConfig = new TemplateConfig();    // 配置自定义输出模板    //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别    // templateConfig.setEntity(&quot;templates/entity2.java&quot;);    // templateConfig.setService();    // templateConfig.setController();    templateConfig.setXml(null);    mpg.setTemplate(templateConfig);    // 策略配置    StrategyConfig strategy = new StrategyConfig();    strategy.setNaming(NamingStrategy.underline_to_camel);    strategy.setColumnNaming(NamingStrategy.underline_to_camel);/* strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;); */    strategy.setEntityLombokModel(true);    strategy.setRestControllerStyle(true);    // 公共父类/* strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;); */    // 写于父类中的公共字段    strategy.setSuperEntityColumns(&quot;id&quot;);    strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));    strategy.setControllerMappingHyphenStyle(true);    strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);    mpg.setStrategy(strategy);    mpg.setTemplateEngine(new FreemarkerTemplateEngine());    mpg.execute();}</code></pre><p>对于spring工程使用Mybatisplus需要配置如下:</p><p>配置 MapperScan</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.baomidou.mybatisplus.samples.quickstart.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调整 SqlSessionFactory 为 MyBatis-Plus 的 SqlSessionFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h1><p>官网直达:<a href="https://mp.baomidou.com/guide/annotation.html#tableid" target="_blank" rel="noopener">https://mp.baomidou.com/guide/annotation.html#tableid</a></p><p>value: 指定表中的主键列的列名 如果实体属性名与列名一致 可以省略不写</p><p>type: 指定主键策略  默认类型是:IdType.NONE</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId</span>(value=<span class="string">"id"</span>,type =IdType.AUTO)</span><br></pre></td></tr></table></figure><h1 id="TbaleName"><a href="#TbaleName" class="headerlink" title="@TbaleName"></a>@TbaleName</h1><!--注：mybatisplus默认使用实体类的类名到数据库中找对应的表--><p>官网直达:<a href="https://mp.baomidou.com/guide/annotation.html#tablename" target="_blank" rel="noopener">https://mp.baomidou.com/guide/annotation.html#tablename</a></p><p>value: 实体类的类名与数据库表名不同时使用value指定表名</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(value = <span class="string">"table"</span>)</span><br></pre></td></tr></table></figure><h1 id="全局策略配置"><a href="#全局策略配置" class="headerlink" title="全局策略配置"></a>全局策略配置</h1><p>*<!-- 2.3+ dbColumnUnderline 默认是true，字段是下划线命名，属性是驼峰命名，自动实现下划线和驼峰转换 -->*</p><p>全局策略配置后整个项目都使用，且全局策略需要在<strong>sqlSessionFactory</strong>中注入全局策略配置。<br>全局策略配置就是一个普通的<strong>bean</strong></p><h1 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Goods g=<span class="keyword">new</span> Goods(<span class="string">"巧克力"</span>,<span class="number">20</span>,<span class="number">3</span>);</span><br><span class="line"> <span class="keyword">int</span> i= d.insert(g);</span><br></pre></td></tr></table></figure><p>注意: id自增使用</p><p>@TableId(type =IdType.AUTO)<br>    private int id;</p><p>否则增加时列里面会存在id值 导致错误</p><p>获取到当前增加列的id值 你只需要拿你穿传入的对象对应数据库的主键值</p><h1 id="updateById方法"><a href="#updateById方法" class="headerlink" title="updateById方法"></a>updateById方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Goods g=<span class="keyword">new</span> Goods(<span class="string">"巧克力A"</span>,<span class="number">20</span>,<span class="number">3</span>);</span><br><span class="line">g.setId(<span class="number">6</span>);</span><br><span class="line"> <span class="keyword">int</span> i= d.updateById(g);</span><br></pre></td></tr></table></figure><p>注意:  id为条件 其他值为需要修改的值</p><h1 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UpdateWrapper&lt;Goods&gt; dd=<span class="keyword">new</span> UpdateWrapper&lt;Goods&gt;();</span><br><span class="line">dd.eq(<span class="string">"id"</span>, <span class="string">"5"</span>);</span><br><span class="line">Goods g=<span class="keyword">new</span> Goods();</span><br><span class="line">g.setName(<span class="string">"688999"</span>);</span><br><span class="line"> <span class="keyword">int</span> i= d.update(g, dd);</span><br></pre></td></tr></table></figure><p>UpdateWrapper 条件</p><p>Goods  要更新的值</p><p>使用这个方法 更新的值不管你给不给参数 都会有一个默认值 即全部更新</p><h1 id="selectById方法"><a href="#selectById方法" class="headerlink" title="selectById方法"></a>selectById方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Goods dd= d.selectById(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>传入一个id值 作为查询条件   不能批量查询</p><h1 id="selectOne方法"><a href="#selectOne方法" class="headerlink" title="selectOne方法"></a>selectOne方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;Goods&gt; qu=<span class="keyword">new</span> QueryWrapper&lt;Goods&gt;();</span><br><span class="line">qu.eq(<span class="string">"name"</span>, <span class="string">"666"</span>).eq(<span class="string">"amount"</span>, <span class="number">20</span>);</span><br><span class="line"> Goods dd= d.selectOne(qu);</span><br></pre></td></tr></table></figure><p>多条件查询  查询值不能为多条数据</p><h1 id="selectBatchIds方法"><a href="#selectBatchIds方法" class="headerlink" title="selectBatchIds方法"></a>selectBatchIds方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"> List&lt;Goods&gt; dd= d.selectBatchIds(list);</span><br><span class="line"> System.out.println(dd.size());</span><br></pre></td></tr></table></figure><p>以多个id作为查询条件  返回一个list集合</p><h1 id="selectByMap方法"><a href="#selectByMap方法" class="headerlink" title="selectByMap方法"></a>selectByMap方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"id"</span>, <span class="number">1</span>);</span><br><span class="line">List&lt;Goods&gt; dd = d.selectByMap(map);</span><br></pre></td></tr></table></figure><p>使用map作参 key要为数据库中的列  多条件查询</p><h1 id="deleteById方法"><a href="#deleteById方法" class="headerlink" title="deleteById方法"></a>deleteById方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=d.deleteById(<span class="string">"6"</span>);</span><br></pre></td></tr></table></figure><p>发送错误查看是否设置@TableId  </p><h1 id="deleteByMap方法"><a href="#deleteByMap方法" class="headerlink" title="deleteByMap方法"></a>deleteByMap方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; hasa=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">hasa.put(<span class="string">"name"</span>,<span class="number">666</span>);</span><br><span class="line">hasa.put(<span class="string">"amount"</span>, <span class="number">20</span>);</span><br><span class="line"> <span class="keyword">int</span> i=d.deleteByMap(hasa);</span><br></pre></td></tr></table></figure><p>使用map多条件删除  key要为数据库中的列</p><h1 id="deleteBatchIds方法"><a href="#deleteBatchIds方法" class="headerlink" title="deleteBatchIds方法"></a>deleteBatchIds方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; idList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">idList.add(<span class="number">5</span>);</span><br><span class="line">idList.add(<span class="number">6</span>);</span><br><span class="line">Integer i = d.deleteBatchIds(idList);</span><br></pre></td></tr></table></figure><p>使用id作为条件批量删除数据  </p><h1 id="Mp启动注入sql原理分析"><a href="#Mp启动注入sql原理分析" class="headerlink" title="Mp启动注入sql原理分析"></a>Mp启动注入sql原理分析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1) 问题: xxxMapper 继承了 BaseMapper&lt;T&gt;, BaseMapper 中提供了通用的 CRUD 方法,     </span><br><span class="line"></span><br><span class="line"> 方法来源于 BaseMapper, 有方法就必须有 SQL, 因为 MyBatis 最终还是需要通过      SQL 语句操作数据.   </span><br><span class="line"></span><br><span class="line">前置知识:MyBatis 源码中比较重要的一些对象， MyBatis 框架的执行流程   Configuration     MappedStatement   ……..</span><br><span class="line"></span><br><span class="line">2) 通过现象看到本质</span><br><span class="line"></span><br><span class="line">A． employeeMapper 的本质  org.apache.ibatis.binding.MapperProxy</span><br><span class="line"></span><br><span class="line">B． MapperProxy 中 sqlSession –&gt;SqlSessionFactory </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">C． SqlSessionFacotry 中 → Configuration→ MappedStatements 每一个 mappedStatement 都表示 Mapper 接口中的一个方法与 Mapper 映射文件 中的一个 SQL。</span><br><span class="line"></span><br><span class="line">MP 在启动就会挨个分析 xxxMapper 中的方法，并且将对应的 SQL 语句处理好，保 存到 configuration 对象中的 mappedStatements 中.</span><br><span class="line"></span><br><span class="line">D． 本质: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Configuration： MyBatis 或者 MP 全局配置对象</span><br><span class="line"></span><br><span class="line">MappedStatement：一个 MappedStatement 对象对应 Mapper 配置文件中的一个 select&#x2F;update&#x2F;insert&#x2F;delete 节点，主要描述的是一条 SQL 语句</span><br><span class="line"></span><br><span class="line">SqlMethod : 枚举对象 ，MP 支持的 SQL 方法</span><br><span class="line"></span><br><span class="line">TableInfo：数据库表反射信息 ，可以获取到数据库表相关的信息</span><br><span class="line"></span><br><span class="line">SqlSource: SQL 语句处理对象</span><br><span class="line"></span><br><span class="line">MapperBuilderAssistant： 用于缓存、SQL 参数、查询方剂结果集处理等. 通过 MapperBuilderAssistant 将每一个 mappedStatement 添加到 configuration 中的 mappedstatements 中</span><br></pre></td></tr></table></figure><h1 id="条件构造selectlist方法"><a href="#条件构造selectlist方法" class="headerlink" title="条件构造selectlist方法"></a>条件构造selectlist方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Goods&gt; dd=d.selectList(<span class="keyword">new</span> QueryWrapper&lt;Goods&gt;().eq(<span class="string">"amount"</span>, <span class="number">0</span>).like(<span class="string">"name"</span>,<span class="string">"彩"</span>).or().like(<span class="string">"name"</span>,<span class="string">"麦"</span>));</span><br><span class="line"><span class="keyword">for</span> (Goods goods : dd) &#123;</span><br><span class="line">System.out.println(goods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eq   ==    like  模糊查询  or 或者</p><p>or()  左右条件不用括号  ornew 左右条件都用一个单独的括号括起来</p><p>​    </p><h1 id="条件构造delete方法"><a href="#条件构造delete方法" class="headerlink" title="条件构造delete方法"></a>条件构造delete方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.delete(<span class="keyword">new</span> UpdateWrapper&lt;Goods&gt;().eq(<span class="string">"name"</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h1 id="AR使用环境"><a href="#AR使用环境" class="headerlink" title="AR使用环境"></a>AR使用环境</h1><p>实体类继承 Model&lt;model&lt;？&gt;&gt; </p><p>重写pkVal方法 return 主键属性</p><h1 id="AR-insert方法"><a href="#AR-insert方法" class="headerlink" title="AR insert方法"></a>AR insert方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Goods g=<span class="keyword">new</span> Goods();</span><br><span class="line">g.setName(<span class="string">"小欧"</span>);</span><br><span class="line">g.setAmount(<span class="number">20</span>);</span><br><span class="line">g.setPrice(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">boolean</span> b=g.insert();</span><br></pre></td></tr></table></figure><h1 id="AR-updateByid方法"><a href="#AR-updateByid方法" class="headerlink" title="AR updateByid方法"></a>AR updateByid方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Goods g=<span class="keyword">new</span> Goods();</span><br><span class="line">g.setId(<span class="number">8</span>);</span><br><span class="line">g.setName(<span class="string">"小小布"</span>);</span><br><span class="line">g.setAmount(<span class="number">10</span>);</span><br><span class="line">g.setPrice(<span class="number">60</span>);</span><br><span class="line"><span class="keyword">boolean</span> b=g.updateById();</span><br></pre></td></tr></table></figure><h1 id="AR-selectById方法"><a href="#AR-selectById方法" class="headerlink" title="AR selectById方法"></a>AR selectById方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Goods g = <span class="keyword">new</span> Goods();</span><br><span class="line">g.setId(<span class="number">8</span>);</span><br><span class="line">Goods gg = (Goods) g.selectById();</span><br></pre></td></tr></table></figure><h1 id="AR-selectAll方法"><a href="#AR-selectAll方法" class="headerlink" title="AR selectAll方法"></a>AR selectAll方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Goods g = <span class="keyword">new</span> Goods();</span><br><span class="line">List&lt;Model&lt;?&gt;&gt; list= g.selectAll();</span><br></pre></td></tr></table></figure><h1 id="AR-deleteById方法"><a href="#AR-deleteById方法" class="headerlink" title="AR deleteById方法"></a>AR deleteById方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Goods g = <span class="keyword">new</span> Goods();</span><br><span class="line">g.setId(<span class="number">8</span>);</span><br><span class="line">     <span class="keyword">boolean</span> bb=  g.deleteById();</span><br></pre></td></tr></table></figure><h1 id="代码生成器代码"><a href="#代码生成器代码" class="headerlink" title="代码生成器代码"></a>代码生成器代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GooText</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"jobob"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"密码"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">"模块名"</span>));</span><br><span class="line">        pc.setParent(<span class="string">"com.baomidou.ant"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">"/templates/mapper.xml.ftl"</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = "/templates/mapper.xml.vm";</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir("调用默认方法创建的目录，自定义目录用");</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity("templates/entity2.java");</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setSuperEntityClass(<span class="string">"你自己的父类实体,没有就不用设置!"</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">"你自己的父类控制器,没有就不用设置!"</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">"id"</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名，多个英文逗号分割"</span>).split(<span class="string">","</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全部复制isNotBlank方法出现报错 检查依赖冲突</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">"plugins"</span>&gt;</span><br><span class="line">         &lt;array&gt;</span><br><span class="line">       &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span>&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;/bean&gt;</span><br><span class="line">   &lt;/array&gt;</span><br><span class="line">      &lt;/property&gt;</span><br></pre></td></tr></table></figure><p>注册分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Doctor&gt; list=serviceSSM.DoctorList(<span class="keyword">new</span> Page&lt;Object&gt;(Integer.parseInt(page),<span class="number">6</span>), a1, a2, a3,a4);</span><br><span class="line"><span class="comment">//当前查询到全部医生 实现分页 每页只显示6条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//page可以拿到以下数据展示  我只展示了部分</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 总条数:page.getTotal()</span></span><br><span class="line"><span class="comment">    * 当前页码:page.getCurrent()</span></span><br><span class="line"><span class="comment">    * 总页码:page.getPages()</span></span><br><span class="line"><span class="comment">    * 每页显示得条数:page.getsize()</span></span><br><span class="line"><span class="comment">    * 是否有上一页：page.hasPrevious()</span></span><br><span class="line"><span class="comment">    * 是否有下一页:page.hasNext()</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * */</span></span><br></pre></td></tr></table></figure><p>分页查询</p><h1 id="扩展插件-执行分析插件"><a href="#扩展插件-执行分析插件" class="headerlink" title="扩展插件-执行分析插件"></a>扩展插件-执行分析插件</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/buffifly/2021/07/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/buffifly/2021/07/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\buffifly\css\APlayer.min.css"><script src="\buffifly\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\buffifly\js\Meting.min.js"></script><hr><h1 id="用二维数组实现杨辉三角"><a href="#用二维数组实现杨辉三角" class="headerlink" title="用二维数组实现杨辉三角"></a>用二维数组实现杨辉三角</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Integer[][] arr=<span class="keyword">new</span> Integer[<span class="number">10</span>][];                 <span class="comment">//定义一个可知行数的二维数组</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length;i++) &#123;</span><br><span class="line">          arr[i]=<span class="keyword">new</span> Integer[i+<span class="number">1</span>];              <span class="comment">//给二维数组每行赋予列值 即 当前本行数=当前本列数</span></span><br><span class="line">          arr[i][<span class="number">0</span>]=arr[i][i]=<span class="number">1</span>;                 <span class="comment">//给数组的头元素和尾元素赋值0</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; arr[i].length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">              arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">              System.out.print(arr[i][j]+<span class="string">"  "</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="稀疏数组转二维数组-and-二维数组转稀疏数组"><a href="#稀疏数组转二维数组-and-二维数组转稀疏数组" class="headerlink" title="稀疏数组转二维数组 and 二维数组转稀疏数组"></a>稀疏数组转二维数组 and 二维数组转稀疏数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> System.out.println(<span class="string">"二维数组转稀疏数组:"</span>);</span><br><span class="line"><span class="comment">//创建一个原始的二维数组 11 * 11    0：没有棋子  1： 黑棋    2： 白棋</span></span><br><span class="line">    <span class="keyword">int</span>[][] chessArr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="comment">//行列分布  例: 第2行第3列 一颗黑棋落棋盘</span></span><br><span class="line">    chessArr[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    chessArr[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//遍历二维数组</span></span><br><span class="line">    System.out.println(<span class="string">"二维数组展示:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArr[i].length; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">"\t"</span>+chessArr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将二维数组 转换成 稀疏数组</span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArr[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessArr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                sum+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"棋盘棋子:"</span>+sum);</span><br><span class="line">    <span class="comment">//创建对应的稀疏数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] sparseArr=<span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//给稀疏数组赋值</span></span><br><span class="line">    sparseArr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">11</span>;</span><br><span class="line">    sparseArr[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">11</span>;</span><br><span class="line">    sparseArr[<span class="number">0</span>][<span class="number">2</span>]=sum;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;chessArr[i].length ; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessArr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                sparseArr[count][<span class="number">0</span>]=i;</span><br><span class="line">                sparseArr[count][<span class="number">1</span>]=j;</span><br><span class="line">                sparseArr[count][<span class="number">2</span>]=chessArr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历稀疏数组</span></span><br><span class="line">    System.out.println(<span class="string">"稀疏数组展示:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">        System.out.println(sparseArr[i][<span class="number">0</span>]+<span class="string">"\t"</span>+sparseArr[i][<span class="number">1</span>]+<span class="string">"\t"</span>+sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取稀疏数组的 第一行中存储的 二维数组的总行数和总列数</span></span><br><span class="line">    <span class="keyword">int</span>[][] chessArrPlus=<span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">    <span class="comment">//读取稀疏数组第一行之后的数据赋值给新数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">        chessArrPlus[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]]=sparseArr[i][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出抓换后的二维数组</span></span><br><span class="line">    System.out.println(<span class="string">"稀疏数组转二维数组:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArrPlus.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArrPlus[i].length; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">"\t"</span>+chessArrPlus[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> * </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
